:- set_prolog_flag(double_quotes, chars).
:- initialization(sexpr_sanity_checks_are_passing).

%% Grammar %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ffmpeg_plan(Plan) --> "ffmpeg", steps(Plan).
steps([]) --> "".
steps([H|T]) --> step(H), steps(T).
step(input_file(FileNameAtom)) -->
    {
        atom_chars(FileNameAtom, FileNameChars)
    },
    ws, "-i", ws, FileNameChars.
step(set_mapping(automatic)) --> "".
step(use_codec(Type, Codec)) -->
    {
        valid_codec(Type, TypeChars, Codec, CodecChars)
    },
    ws, "-c:", TypeChars, ws, CodecChars.
step(output_file(FileNameAtom)) -->
    {
        atom_chars(FileNameAtom, FileNameChars)
    },
    ws, "-o", ws, FileNameChars.

ws --> " ".

valid_codec(TypeAtom, TypeChars, CodecAtom, CodecChars) :-
    valid_codec_aux(TypeAtom, CodecAtom),
    atom_chars(TypeAtom, TypeChars),
    atom_chars(CodecAtom, CodecChars).
valid_codec_aux(audio, C) :- member(C, [aac, opus]).
valid_codec_aux(video, C) :- member(C, [libx264, libx265]).

%% S-Expr grammar %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sexpr(S) --> filler(_), sexpr_proper(S), filler(_).
sexpr_proper([]) --> "".
sexpr_proper([H|T]) --> word(H), spaced_sexpr(T).
sexpr_proper([H|T]) --> "(", filler(_), sexpr(H), filler(_), ")", sexpr_proper(T).
spaced_sexpr([]) --> "".
spaced_sexpr([H|T]) --> space, sexpr([H|T]).
space --> filler([_|_]).
filler([]) --> "".
filler([_|T]) --> " ", filler(T).
word(A) --> word_aux([H|T]), { atom_chars(A, [H|T]) }.
word(N) --> number_aux([H|T]), { number_chars(N, [H|T]) }.
number_aux([]) --> "".
number_aux([H|T]) --> digit(H), number_aux(T).
word_aux([]) --> "".
word_aux([H|T]) --> character(H), word_aux(T).
character(C) --> letter(C) | special(C) | digit(C).
letter(L) --> { member(L, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") }, [L].
digit(D) --> { member(D, "0123456789") }, [D].
special(S) --> { member(S, "-_*+.") }, [S].

sexpr_list(S, L) :-
    phrase(sexpr(L), S).

sexpr_terms(Sexpr, Terms) :-
    sexpr_list(Sexpr, List),
    maplist(=.., Terms, List).

sexpr_tests_are_passing :-
    sexpr_sanity_checks_are_passing.

sexpr_sanity_checks_are_passing :-
    sexpr_list("", []),
    sexpr_list("()", [[]]),
    sexpr_list("hello ", [hello]),
    sexpr_list("(hello)", [[hello]]),
    sexpr_list("()()", [[],[]]),
    sexpr_list("(a b)(c d)", [[a,b],[c,d]]),
    sexpr_list("a1", [a1]),
    sexpr_list("* 2 (+ 3 4)", [*, 2, [+, 3, 4]]),
    sexpr_list("(* 2 (+ 3 4))", [[*, 2, [+, 3, 4]]]).

%% DCG Utils %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

any_sequence([]) --> [].
any_sequence([H|T]) --> [H], any_sequence(T).

any_sequence_of_any_sequences([]) --> [].
any_sequence_of_any_sequences([H|T]) --> any_sequence(H), any_sequence_of_any_sequences(T).

concatenation(ListOfLists, Concatenation) :-
    phrase(any_sequence_of_any_sequences(ListOfLists), Concatenation).

%% Main %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

main :-
    main(A),
    format("~s~n", [A]).

main(A) :-
    plan(S),
    sexpr_terms(S, T),
    phrase(ffmpeg_plan(T), A).

plan("(input_file world.mkv)(set_mapping automatic)(use_codec video libx265)(use_codec audio opus)(output_file hello.mp4)").
