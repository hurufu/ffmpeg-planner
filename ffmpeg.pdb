:- set_prolog_flag(double_quotes, chars).
:- initialization(all_tests_are_passing).

:- use_module(library(pio)).

%% Grammar %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ffmpeg_plan(Plan) --> "-loglevel warning ", steps(Plan).
steps([]) --> "".
steps([H|T]) --> step(H), steps(T).
step(open_file(FileNameAtom,_InFile)) -->
    {
        filename_adjusted(FileNameAtom, AdjustedFileNameChars)
    },
    ws, "-i", ws, AdjustedFileNameChars.
step(map_audio_stream(FromFile,FromStream,_ToStream)) -->
    {
        atom_chars(FromFile, [f,FromFileChar]),
        atom_chars(FromStream, [s,FromFileChar,FromStreamChar])
    },
    ws, "-map", ws, [FromFileChar], ":", [FromStreamChar].
step(map_video_stream(FromFile,FromStream,_ToStream)) -->
    {
        atom_chars(FromFile, [f,FromFileChar]),
        atom_chars(FromStream, [s,FromFileChar,FromStreamChar])
    },
    ws, "-map", ws, [FromFileChar], ":", [FromStreamChar].
step(set_video_encoder(_, CodecAtom)) -->
    {
        atom_chars(CodecAtom, CodecChars)
    },
    ws, "-c:v", ws, CodecChars.
step(set_audio_encoder(_, CodecAtom)) -->
    {
        atom_chars(CodecAtom, CodecChars)
    },
    ws, "-c:a", ws, CodecChars.
step(write_file(FileNameAtom,_OutFile)) -->
    {
        filename_adjusted(FileNameAtom, AdjustedFileNameChars), !
    },
    ws, AdjustedFileNameChars.
step('reach-goal') --> "".
step(mark_stream(_)) --> "".
step(mark_audio_stream(_)) --> "".
step(mark_video_stream(_)) --> "".
step(mark_name(_)) --> "".
step(mark_file(_)) --> "".
step(mark_output_file(_)) --> "".

ws --> " ".

valid_codec(KindAtom, [KindChar], CodecAtom, CodecChars) :-
    valid_codec_aux(KindAtom, CodecAtom),
    atom_chars(KindAtom, [_,KindChar|_]),
    atom_chars(CodecAtom, CodecChars).
valid_codec_aux(ca, C) :- member(C, [aac, opus]).
valid_codec_aux(cv, C) :- member(C, [libx264, libx265]).

% Workaround for not supported strings in PDDL
% Replaces last "_" with "."
filename_adjusted(FileNameAtom, AdjustedFileNameChars) :-
    atom_chars(FileNameAtom, FileNameChars),
    phrase(adjust(AdjustedFileNameChars), FileNameChars).
filename_adjusted(FileNameAtom, FileNameChars) :-
    atom_chars(FileNameAtom, FileNameChars).

adjust(X) --> dirname(D), basename(B), "_", suffix(S), { append([D,B,".",S], X) }.
dirname([]) --> "". % Not implemented.
basename([]) --> "".
basename([H|T]) --> [H], basename(T).
suffix("mp4") --> "mp4".
suffix("mp3") --> "mp3".
suffix("mkv") --> "mkv".
suffix("avi") --> "avi".
suffix("ogg") --> "ogg".
suffix("webm") --> "webm".
suffix("webp") --> "webp".

ffmpeg_plan_tests_are_passing :-
    filename_adjusted('hello_mp4', "hello.mp4").

%% S-Expr grammar %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sexpr(S) --> filler(_), sexpr_proper(S), filler(_).
sexpr_proper([]) --> "".
sexpr_proper([H|T]) --> word(H), spaced_sexpr(T).
sexpr_proper([H|T]) --> "(", sexpr(H), ")", sexpr(T).
spaced_sexpr([]) --> "".
spaced_sexpr([H|T]) --> space, sexpr([H|T]).
space --> filler([_|_]).
filler([]) --> "".
filler([_|T]) --> ("\r"|" "|"\n"|"\t"), filler(T).
word(A) --> character(C), word_aux(W), { atom_chars(A, [C|W]) }.
word(N) --> number_aux([H|T]), { number_chars(N, [H|T]) }.
number_aux([]) --> "".
number_aux([H|T]) --> digit(H), number_aux(T).
word_aux([]) --> "".
word_aux([H|T]) --> (character(H)|digit(H)), word_aux(T).
character(C) --> letter(C) | special(C).
letter(L) --> { member(L, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") }, [L].
digit(D) --> { member(D, "0123456789") }, [D].
special(S) --> { member(S, "-_*+.") }, [S].

sexpr_list(S, L) :-
    phrase(sexpr(L), S).

% TODO: It should convert list reqursively
sexpr_terms(Sexpr, Terms) :-
    sexpr_list(Sexpr, List),
    maplist(=.., Terms, List).

sexpr_tests_are_passing :-
    sexpr_sanity_checks_are_passing,
    sexpr_arithmetics_sanity_checks_are_passing.

sexpr_sanity_checks_are_passing :-
    sexpr_list("", []),
    sexpr_list("()", [[]]),
    sexpr_list("hello ", [hello]),
    sexpr_list("(hello)", [[hello]]),
    sexpr_list("()()", [[],[]]),
    sexpr_list("(a b)(c d)", [[a,b],[c,d]]),
    sexpr_list("(a b)\r\n(c d)\r\n", [[a,b],[c,d]]),
    sexpr_list("a1", [a1]),
    sexpr_list("* 2 (+ 3 4)", [*, 2, [+, 3, 4]]),
    sexpr_list("(* 2 (+ 3 4))", [[*, 2, [+, 3, 4]]]).

sexpr_arithmetics_sanity_checks_are_passing :-
    sexpr_terms("(* 2 3) (+ 3 4)", T),
    maplist(is, [6,7], T).

%% DCG Utils %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

any_sequence([]) --> [].
any_sequence([H|T]) --> [H], any_sequence(T).

any_sequence_of_any_sequences([]) --> [].
any_sequence_of_any_sequences([H|T]) --> any_sequence(H), any_sequence_of_any_sequences(T).

concatenation(ListOfLists, Concatenation) :-
    phrase(any_sequence_of_any_sequences(ListOfLists), Concatenation).

%% Main %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

main :-
    main(A),
    format("~s~n", [A]).

main(A) :-
    plan(S),
    sexpr_terms(S, T),
    phrase(ffmpeg_plan(T), A).

pio :-
    pio('test01.scm').

pio(ProblemFile) :-
    pio(ProblemFile, Terms),
    phrase(ffmpeg_plan(Terms), Args),
    format("~s~n", [Args]).

pio(ProblemFile, Terms) :-
    phrase_from_file(any_sequence(Codes), ProblemFile),
    string_codes(String, Codes),
    string_chars(String, Chars),
    sexpr_terms(Chars, Terms).

plan("(open_file world.mkv)(set_mapping automatic)(use_video_codec s10 libx265)(use_audio_codec s11 opus)(output_file hello.mp4)").

all_tests_are_passing :-
    sexpr_tests_are_passing,
    ffmpeg_plan_tests_are_passing.
