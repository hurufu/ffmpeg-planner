:- set_prolog_flag(double_quotes, chars).
:- initialization(all_tests_are_passing).

:- use_module(library(dif)).

% Unifies FOL formula with an equivalent one with all similar operators condensed
% Extract all named entities to :objects
% Unifies FOL formula in S-expr format with equivalent one where all 'be'
% predicates are replaced with '='
u(exists(A,B), e(  [i(A)], a(X)), O) :-
    must_be_variable(A),
    u(B, a(X), O).
u(exists(A,B), e([i(A)|J],    X), O) :-
    must_be_variable(A),
    u(B, e(J, X), O),
    differs_from_all(i(A), J).
u(&(A,B), a([AO,BO]), [AO,BO]) :- is_o(A, AO), is_o(B, BO).
u(&(A,B), a([AO,BP]), [AO])    :- is_o(A, AO), is_p(B, BP).
u(&(A,B), a([AP,BO]), [BO])    :- is_p(A, AP), is_o(B, BO).
u(&(A,B), a([AP,BP]), [])      :- is_p(A, AP), is_p(B, BP).
u(&(A,B), a([AO|AX]), [AO|O])  :- is_o(A, AO), u(B, a(AX), O).
u(&(A,B), a([AP|AX]), O)       :- is_p(A, AP), u(B, a(AX), O).

is_o(object(_,A,P,_,_,_,_)-_/_, o(P,X)) :-
    tag(A, X).
is_p(predicate(_,_,be,A,B)-_/_, p(=,X,Y)) :-
    tag(A, X),
    tag(B, Y).
is_p(predicate(_,_,P,A,B)-_/_, p(P,X,Y)) :-
    dif(=, P),
    dif(be, P),
    tag(A, X),
    tag(B, Y).
tag(A, X) :- var(A) -> tag_variable(A,X); tag_term(A,X).
tag_variable(A, i(A)).
tag_term(named(A), n(A)).
tag_term(string(A), s(A)).

differs_from_all(A, L) :- maplist(dif(A), L).
must_be_variable(A) :- nonvar(A) -> throw(type_error(var,A)); true.


% UT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

test(S, P, T, Y) :-
    S = 'p:f0 is a file which has a name which is "hello.mkv"',
    P = exists(A,exists(B,exists(C,exists(D,exists(E,
        &(
            object(F,A,file,countable,na,eq,1)-1/6,
            &(
                object(F,B,name,countable,na,eq,1)-1/10,
                &(
                    predicate(F,C,be,B,string('hello.mkv'))-1/12,
                    &(
                        predicate(F,D,have,A,B)-1/8,
                        predicate(F,E,be,named(f0),A)-1/4))))))))),
    T = [exists, [A, B, C, D, E],
                 [and, [file, A],
                       [name, B],
                       [=, B, 'hello_mkv'],
                       [have, A, B],
                       [=, f0, A]]],
    Y = e([i(A),i(B),i(C),i(D),i(E)],
          a([o(file, i(A)),
             o(name, i(B)),
             p(=, i(B), s('hello.mkv')),
             p(have, i(A), i(B)),
             p(=, n(f0), i(A))])).

ut_fol_sanity_checks_are_passing :-
     test(_,P,_,X), u(P,X,_).

all_tests_are_passing :-
     ut_fol_sanity_checks_are_passing.
